
#!/bin/bash
# Set CPU governor to performance mode
set -e
borange='\e[0;33m'
yellow='\e[1;33m'
purple='\e[0;35m'
green='\e[0;32m'
red='\e[0;31m'
blue='\e[0;34m'
NC='\e[0m' # No Color

# Set the CPU governor to performance mode
echo "Setting CPU governor to performance mode..."
sudo echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor

# Show available models
echo "Running model: DeepSeek-R1-Distill-Qwen-1.5B-Q5_K_M.gguf"
echo "This will benchmark the tokens per second for the CPU/GPU used"

# Set the model path
model_path="~/Downloads/DeepSeek-R1-Distill-Qwen-1.5B-Q5_K_M.gguf"

# Get the CPU and GPU info
cpu_used=$(lscpu | grep 'Model name' | cut -f 2 -d ":" | awk '{$1=$1}1')
gpu_avail=$(sudo lshw -C display | grep product: | head -1 | cut -c17-)

echo ""
echo -e "Benchmarking model: ${green}$model_path${NC} on CPU: ${green}$cpu_used${NC} and GPU: ${green}$gpu_avail${NC}"
echo ""

# Ask how many times to run the benchmark
echo "How many times to run the benchmark?"
read benchmark
echo -e "Running the benchmark ${purple}$benchmark${NC} times..."

# Run the benchmark
for run in $(seq 1 $benchmark); do
    echo "Running test #$run..."
    /llama-run $model_path --prompt "Why is the blue sky blue?" --verbose 2>&1 >/dev/null | grep "eval rate:" | tee -a "benchmark_results.txt"
done

# Calculate the average tokens per second
avg=$(cat benchmark_results.txt | grep -v "prompt eval rate:" | awk '{print $3}' | awk 'NR>1{ tot+=$1 } END{ print tot/(NR-1) }')

# Output the result
echo ""
echo -e ${red}$avg${NC} is the average ${blue}tokens per second${NC} for model: ${green}$model_path${NC} on CPU: ${green}$cpu_used${NC} and GPU: ${green}$gpu_avail${NC}
echo ""

# Reset CPU governor to original setting
cpu_def=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
echo "Setting CPU governor back to original setting..."
sudo echo $cpu_def | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor

# Optional: Stop and start ollama to clear VRAM (if applicable)
# sudo systemctl stop ollama; sudo systemctl start ollama

# EOF
